var c;(function(n){n[n.UsbCdcAcm=0]="UsbCdcAcm"})(c||(c={}));const _=32,p=34,b=35,u=255,v=8,w="none",g=1,y=[16,8,7,6,5],S=[1,2],O=["none","even","odd"],I=["none","odd","even"],k=[1,1.5,2],d={protocol:c.UsbCdcAcm,usbControlInterfaceClass:2,usbTransferInterfaceClass:10};function l(n,t){const e=n.configurations[0];for(const i of e.interfaces)if(i.alternates[0].interfaceClass===t)return i;throw new TypeError(`Unable to find interface with class ${t}.`)}function f(n,t){const e=n.alternates[0];for(const i of e.endpoints)if(i.direction==t)return i;throw new TypeError(`Interface ${n.interfaceNumber} does not have an ${t} endpoint.`)}class E{constructor(t,e,i){this.type="bytes",this.device_=t,this.endpoint_=e,this.onError_=i}pull(t){(async()=>{var e;let i;if(t.desiredSize){const s=t.desiredSize/this.endpoint_.packetSize;i=Math.ceil(s)*this.endpoint_.packetSize}else i=this.endpoint_.packetSize;try{const s=await this.device_.transferIn(this.endpoint_.endpointNumber,i);if(s.status!="ok"&&(t.error(`USB error: ${s.status}`),this.onError_()),!((e=s.data)===null||e===void 0)&&e.buffer){const r=new Uint8Array(s.data.buffer,s.data.byteOffset,s.data.byteLength);t.enqueue(r)}}catch(s){t.error(s.toString()),this.onError_()}})()}}class B{constructor(t,e,i){this.device_=t,this.endpoint_=e,this.onError_=i}async write(t,e){try{const i=await this.device_.transferOut(this.endpoint_.endpointNumber,t);i.status!="ok"&&(e.error(i.status),this.onError_())}catch(i){e.error(i.toString()),this.onError_()}}}class h{constructor(t,e){this.polyfillOptions_=Object.assign(Object.assign({},d),e),this.outputSignals_={dataTerminalReady:!1,requestToSend:!1,break:!1},this.device_=t,this.controlInterface_=l(this.device_,this.polyfillOptions_.usbControlInterfaceClass),this.transferInterface_=l(this.device_,this.polyfillOptions_.usbTransferInterfaceClass),this.inEndpoint_=f(this.transferInterface_,"in"),this.outEndpoint_=f(this.transferInterface_,"out")}get readable(){var t;return!this.readable_&&this.device_.opened&&(this.readable_=new ReadableStream(new E(this.device_,this.inEndpoint_,()=>{this.readable_=null}),{highWaterMark:(t=this.serialOptions_.bufferSize)!==null&&t!==void 0?t:u})),this.readable_}get writable(){var t;return!this.writable_&&this.device_.opened&&(this.writable_=new WritableStream(new B(this.device_,this.outEndpoint_,()=>{this.writable_=null}),new ByteLengthQueuingStrategy({highWaterMark:(t=this.serialOptions_.bufferSize)!==null&&t!==void 0?t:u}))),this.writable_}async open(t){this.serialOptions_=t,this.validateOptions();try{await this.device_.open(),this.device_.configuration===null&&await this.device_.selectConfiguration(1),await this.device_.claimInterface(this.controlInterface_.interfaceNumber),this.controlInterface_!==this.transferInterface_&&await this.device_.claimInterface(this.transferInterface_.interfaceNumber),await this.setLineCoding(),await this.setSignals({dataTerminalReady:!0})}catch(e){throw this.device_.opened&&await this.device_.close(),new Error("Error setting up device: "+e.toString())}}async close(){const t=[];this.readable_&&t.push(this.readable_.cancel()),this.writable_&&t.push(this.writable_.abort()),await Promise.all(t),this.readable_=null,this.writable_=null,this.device_.opened&&(await this.setSignals({dataTerminalReady:!1,requestToSend:!1}),await this.device_.close())}async forget(){return this.device_.forget()}getInfo(){return{usbVendorId:this.device_.vendorId,usbProductId:this.device_.productId}}reconfigure(t){return this.serialOptions_=Object.assign(Object.assign({},this.serialOptions_),t),this.validateOptions(),this.setLineCoding()}async setSignals(t){if(this.outputSignals_=Object.assign(Object.assign({},this.outputSignals_),t),t.dataTerminalReady!==void 0||t.requestToSend!==void 0){const e=(this.outputSignals_.dataTerminalReady?1:0)|(this.outputSignals_.requestToSend?2:0);await this.device_.controlTransferOut({requestType:"class",recipient:"interface",request:p,value:e,index:this.controlInterface_.interfaceNumber})}if(t.break!==void 0){const e=this.outputSignals_.break?65535:0;await this.device_.controlTransferOut({requestType:"class",recipient:"interface",request:b,value:e,index:this.controlInterface_.interfaceNumber})}}validateOptions(){if(!this.isValidBaudRate(this.serialOptions_.baudRate))throw new RangeError("invalid Baud Rate "+this.serialOptions_.baudRate);if(!this.isValidDataBits(this.serialOptions_.dataBits))throw new RangeError("invalid dataBits "+this.serialOptions_.dataBits);if(!this.isValidStopBits(this.serialOptions_.stopBits))throw new RangeError("invalid stopBits "+this.serialOptions_.stopBits);if(!this.isValidParity(this.serialOptions_.parity))throw new RangeError("invalid parity "+this.serialOptions_.parity)}isValidBaudRate(t){return t%1===0}isValidDataBits(t){return typeof t>"u"?!0:y.includes(t)}isValidStopBits(t){return typeof t>"u"?!0:S.includes(t)}isValidParity(t){return typeof t>"u"?!0:O.includes(t)}async setLineCoding(){var t,e,i;const s=new ArrayBuffer(7),r=new DataView(s);if(r.setUint32(0,this.serialOptions_.baudRate,!0),r.setUint8(4,k.indexOf((t=this.serialOptions_.stopBits)!==null&&t!==void 0?t:g)),r.setUint8(5,I.indexOf((e=this.serialOptions_.parity)!==null&&e!==void 0?e:w)),r.setUint8(6,(i=this.serialOptions_.dataBits)!==null&&i!==void 0?i:v),(await this.device_.controlTransferOut({requestType:"class",recipient:"interface",request:_,value:0,index:this.controlInterface_.interfaceNumber},s)).status!="ok")throw new DOMException("NetworkError","Failed to set line coding.")}}class m{async requestPort(t,e){e=Object.assign(Object.assign({},d),e);const i=[];if(t&&t.filters)for(const a of t.filters){const o={classCode:e.usbControlInterfaceClass};a.usbVendorId!==void 0&&(o.vendorId=a.usbVendorId),a.usbProductId!==void 0&&(o.productId=a.usbProductId),i.push(o)}i.length===0&&i.push({classCode:e.usbControlInterfaceClass});const s=await navigator.usb.requestDevice({filters:i});return new h(s,e)}async getPorts(t){t=Object.assign(Object.assign({},d),t);const e=await navigator.usb.getDevices(),i=[];return e.forEach(s=>{try{const r=new h(s,t);i.push(r)}catch{}}),i}}const C=new m;export{c as SerialPolyfillProtocol,h as SerialPort,C as serial};
